"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Transform API
 * TODO
 *
 * The version of the OpenAPI document: 1.0
 * Contact: someone@maxar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionDescriptorToJSON = exports.FunctionDescriptorFromJSONTyped = exports.FunctionDescriptorFromJSON = exports.instanceOfFunctionDescriptor = void 0;
const runtime_1 = require("../runtime");
const FunctionDescriptorOutputValue_1 = require("./FunctionDescriptorOutputValue");
const ParameterDescriptor_1 = require("./ParameterDescriptor");
/**
 * Check if a given object implements the FunctionDescriptor interface.
 */
function instanceOfFunctionDescriptor(value) {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "vendor" in value;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "parameters" in value;
    isInstance = isInstance && "outputValue" in value;
    return isInstance;
}
exports.instanceOfFunctionDescriptor = instanceOfFunctionDescriptor;
function FunctionDescriptorFromJSON(json) {
    return FunctionDescriptorFromJSONTyped(json, false);
}
exports.FunctionDescriptorFromJSON = FunctionDescriptorFromJSON;
function FunctionDescriptorFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'name': json['name'],
        'description': json['description'],
        'vendor': json['vendor'],
        'version': json['version'],
        'parameters': ((0, runtime_1.mapValues)(json['parameters'], ParameterDescriptor_1.ParameterDescriptorFromJSON)),
        'documentation': !(0, runtime_1.exists)(json, 'documentation') ? undefined : json['documentation'],
        'outputValue': (0, FunctionDescriptorOutputValue_1.FunctionDescriptorOutputValueFromJSON)(json['outputValue']),
    };
}
exports.FunctionDescriptorFromJSONTyped = FunctionDescriptorFromJSONTyped;
function FunctionDescriptorToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'description': value.description,
        'vendor': value.vendor,
        'version': value.version,
        'parameters': ((0, runtime_1.mapValues)(value.parameters, ParameterDescriptor_1.ParameterDescriptorToJSON)),
        'documentation': value.documentation,
        'outputValue': (0, FunctionDescriptorOutputValue_1.FunctionDescriptorOutputValueToJSON)(value.outputValue),
    };
}
exports.FunctionDescriptorToJSON = FunctionDescriptorToJSON;
//# sourceMappingURL=FunctionDescriptor.js.map