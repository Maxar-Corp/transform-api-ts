/* tslint:disable */
/* eslint-disable */
/**
 * Transform API
 * TODO
 *
 * The version of the OpenAPI document: 1.0
 * Contact: someone@maxar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { StatusType } from './StatusType.js';
import {
    StatusTypeFromJSON,
    StatusTypeFromJSONTyped,
    StatusTypeToJSON,
} from './StatusType.js';

/**
 * 
 * @export
 * @interface TransformProblem
 */
export interface TransformProblem {
    /**
     * 
     * @type {string}
     * @memberof TransformProblem
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof TransformProblem
     */
    title: string;
    /**
     * 
     * @type {StatusType}
     * @memberof TransformProblem
     */
    status: StatusType;
    /**
     * 
     * @type {string}
     * @memberof TransformProblem
     */
    detail: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof TransformProblem
     */
    parameters: { [key: string]: any; };
}

/**
 * Check if a given object implements the TransformProblem interface.
 */
export function instanceOfTransformProblem(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "detail" in value;
    isInstance = isInstance && "parameters" in value;

    return isInstance;
}

export function TransformProblemFromJSON(json: any): TransformProblem {
    return TransformProblemFromJSONTyped(json, false);
}

export function TransformProblemFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransformProblem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'title': json['title'],
        'status': StatusTypeFromJSON(json['status']),
        'detail': json['detail'],
        'parameters': json['parameters'],
    };
}

export function TransformProblemToJSON(value?: TransformProblem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'title': value.title,
        'status': StatusTypeToJSON(value.status),
        'detail': value.detail,
        'parameters': value.parameters,
    };
}

