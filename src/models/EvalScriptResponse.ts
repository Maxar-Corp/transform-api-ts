/* tslint:disable */
/* eslint-disable */

import { exists } from '../runtime.js';
/**
 * 
 * @export
 * @interface EvalScriptResponse
 */
export interface EvalScriptResponse {
    /**
     * The return value generated by running the script.
     * @type {any}
     * @memberof EvalScriptResponse
     */
    result?: any | null;
    /**
     * The standard out generated by running the script.
     * @type {string}
     * @memberof EvalScriptResponse
     */
    response?: string;
    /**
     * The error, if any, generated by running the script.  Null if no errors.
     * @type {string}
     * @memberof EvalScriptResponse
     */
    error?: string;
}

/**
 * Check if a given object implements the EvalScriptResponse interface.
 */
export function instanceOfEvalScriptResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EvalScriptResponseFromJSON(json: any): EvalScriptResponse {
    return EvalScriptResponseFromJSONTyped(json, false);
}

export function EvalScriptResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): EvalScriptResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'result': !exists(json, 'result') ? undefined : json['result'],
        'response': !exists(json, 'response') ? undefined : json['response'],
        'error': !exists(json, 'error') ? undefined : json['error'],
    };
}

export function EvalScriptResponseToJSON(value?: EvalScriptResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'result': value.result,
        'response': value.response,
        'error': value.error,
    };
}

