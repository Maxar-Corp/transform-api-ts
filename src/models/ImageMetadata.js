"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Transform API
 * TODO
 *
 * The version of the OpenAPI document: 1.0
 * Contact: someone@maxar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageMetadataToJSON = exports.ImageMetadataFromJSONTyped = exports.ImageMetadataFromJSON = exports.instanceOfImageMetadata = void 0;
const SampleDataType_1 = require("./SampleDataType");
/**
 * Check if a given object implements the ImageMetadata interface.
 */
function instanceOfImageMetadata(value) {
    let isInstance = true;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "minTileX" in value;
    isInstance = isInstance && "minTileY" in value;
    isInstance = isInstance && "maxTileX" in value;
    isInstance = isInstance && "maxTileY" in value;
    isInstance = isInstance && "tileSizeX" in value;
    isInstance = isInstance && "tileSizeY" in value;
    isInstance = isInstance && "numBands" in value;
    isInstance = isInstance && "dataType" in value;
    isInstance = isInstance && "minPixelX" in value;
    isInstance = isInstance && "minPixelY" in value;
    isInstance = isInstance && "maxPixelX" in value;
    isInstance = isInstance && "maxPixelY" in value;
    isInstance = isInstance && "tileOffsetX" in value;
    isInstance = isInstance && "tileOffsetY" in value;
    return isInstance;
}
exports.instanceOfImageMetadata = instanceOfImageMetadata;
function ImageMetadataFromJSON(json) {
    return ImageMetadataFromJSONTyped(json, false);
}
exports.ImageMetadataFromJSON = ImageMetadataFromJSON;
function ImageMetadataFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'version': json['version'],
        'minTileX': json['minTileX'],
        'minTileY': json['minTileY'],
        'maxTileX': json['maxTileX'],
        'maxTileY': json['maxTileY'],
        'tileSizeX': json['tileSizeX'],
        'tileSizeY': json['tileSizeY'],
        'numBands': json['numBands'],
        'dataType': (0, SampleDataType_1.SampleDataTypeFromJSON)(json['dataType']),
        'minPixelX': json['minPixelX'],
        'minPixelY': json['minPixelY'],
        'maxPixelX': json['maxPixelX'],
        'maxPixelY': json['maxPixelY'],
        'tileOffsetX': json['tileOffsetX'],
        'tileOffsetY': json['tileOffsetY'],
    };
}
exports.ImageMetadataFromJSONTyped = ImageMetadataFromJSONTyped;
function ImageMetadataToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'version': value.version,
        'minTileX': value.minTileX,
        'minTileY': value.minTileY,
        'maxTileX': value.maxTileX,
        'maxTileY': value.maxTileY,
        'tileSizeX': value.tileSizeX,
        'tileSizeY': value.tileSizeY,
        'numBands': value.numBands,
        'dataType': (0, SampleDataType_1.SampleDataTypeToJSON)(value.dataType),
        'minPixelX': value.minPixelX,
        'minPixelY': value.minPixelY,
        'maxPixelX': value.maxPixelX,
        'maxPixelY': value.maxPixelY,
        'tileOffsetX': value.tileOffsetX,
        'tileOffsetY': value.tileOffsetY,
    };
}
exports.ImageMetadataToJSON = ImageMetadataToJSON;
//# sourceMappingURL=ImageMetadata.js.map